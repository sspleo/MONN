{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "from collections import defaultdict\n",
    "import os\n",
    "import pickle\n",
    "import sys\n",
    "import numpy as np\n",
    "from rdkit import Chem\n",
    "from rdkit.Chem import AllChem\n",
    "from rdkit import DataStructs\n",
    "from rdkit.ML.Cluster import Butina\n",
    "from scipy.cluster.hierarchy import fcluster, linkage, single\n",
    "from scipy.spatial.distance import pdist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import networkx as nx\n",
    "from networkx.algorithms import bipartite\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "B = nx.Graph()\n",
    "## node list of bipartite 0\n",
    "B.add_nodes_from(['A', 'B', 'C', 'D'], bipartite = 0)\n",
    "## node list of bipartite 1\n",
    "B.add_nodes_from([1,2,3], bipartite=1)\n",
    "\n",
    "## add edges between them\n",
    "B.add_edges_from([('A',1),('A',2), ('B',1), ('C',1), ('D',1),('D',2),('D',3)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "G = nx.Graph()\n",
    "G.add_nodes_from(valid_cid_list, bipartite = 0)\n",
    "G.add_nodes_from(valid_pid_list, bipartite = 1)\n",
    "G.add_edges_from(valid_pair_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "top = valid_cid_list\n",
    "pos = nx.bipartite_layout(G, top)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "color_map = []\n",
    "for element in G:\n",
    "    if element in top:\n",
    "        color_map.append('red')\n",
    "    else:\n",
    "        color_map.append('green')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(num=None, figsize=(80, 60), dpi=80, facecolor='w', edgecolor='k')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nx.draw_networkx(G, pos = pos, node_color = color_map, with_labels=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check if B is bipartite set\n",
    "bipartite.is_bipartite(B)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "set0 = bipartite.sets(B)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "top = nx.bipartite.sets(B)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "pos = nx.bipartite_layout(B,top)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "color_map = []\n",
    "for node in B:\n",
    "    if node in set0:\n",
    "        color_map.append('red')\n",
    "    else:\n",
    "        color_map.append('green')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nx.draw_networkx(B, pos = pos, node_color = color_map, with_labels=True, font_weight = 'bold')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "elem_list = ['C', 'N', 'O', 'S', 'F', 'Si', 'P', 'Cl', 'Br', 'Mg', 'Na', 'Ca', 'Fe', 'As', 'Al', 'I', 'B', 'V', 'K', 'Tl', 'Yb', 'Sb', 'Sn', 'Ag', 'Pd', 'Co', 'Se', 'Ti', 'Zn', 'H', 'Li', 'Ge', 'Cu', 'Au', 'Ni', 'Cd', 'In', 'Mn', 'Zr', 'Cr', 'Pt', 'Hg', 'Pb', 'W', 'Ru', 'Nb', 'Re', 'Te', 'Rh', 'Tc', 'Ba', 'Bi', 'Hf', 'Mo', 'U', 'Sm', 'Os', 'Ir', 'Ce','Gd','Ga','Cs', 'unknown']\n",
    "aa_list = ['A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'Y']\n",
    "atom_fdim = len(elem_list) + 6 + 6 + 6 + 1\n",
    "bond_fdim = 6\n",
    "max_nb = 6\n",
    "\n",
    "\n",
    "def onek_encoding_unk(x, allowable_set):\n",
    "    if x not in allowable_set:\n",
    "        x = allowable_set[-1]\n",
    "    return list(map(lambda s: x == s, allowable_set))\n",
    "\n",
    "\n",
    "def atom_features(atom):\n",
    "    return np.array(onek_encoding_unk(atom.GetSymbol(), elem_list) \n",
    "            + onek_encoding_unk(atom.GetDegree(), [0,1,2,3,4,5]) \n",
    "            + onek_encoding_unk(atom.GetExplicitValence(), [1,2,3,4,5,6])\n",
    "            + onek_encoding_unk(atom.GetImplicitValence(), [0,1,2,3,4,5])\n",
    "            + [atom.GetIsAromatic()], dtype=np.float32)\n",
    "\n",
    "\n",
    "def bond_features(bond):\n",
    "    bt = bond.GetBondType()\n",
    "    return np.array([bt == Chem.rdchem.BondType.SINGLE, bt == Chem.rdchem.BondType.DOUBLE, bt == Chem.rdchem.BondType.TRIPLE, \\\n",
    "    bt == Chem.rdchem.BondType.AROMATIC, bond.GetIsConjugated(), bond.IsInRing()], dtype=np.float32)\n",
    "\n",
    "\n",
    "def Mol2Graph(mol):\n",
    "    # convert molecule to GNN input\n",
    "    idxfunc=lambda x:x.GetIdx()\n",
    "\n",
    "    n_atoms = mol.GetNumAtoms()\n",
    "    assert mol.GetNumBonds() >= 0\n",
    "\n",
    "    n_bonds = max(mol.GetNumBonds(), 1)\n",
    "    fatoms = np.zeros((n_atoms,), dtype=np.int32) #atom feature ID\n",
    "    fbonds = np.zeros((n_bonds,), dtype=np.int32) #bond feature ID\n",
    "    atom_nb = np.zeros((n_atoms, max_nb), dtype=np.int32)\n",
    "    bond_nb = np.zeros((n_atoms, max_nb), dtype=np.int32)\n",
    "    num_nbs = np.zeros((n_atoms,), dtype=np.int32)\n",
    "    num_nbs_mat = np.zeros((n_atoms,max_nb), dtype=np.int32)\n",
    "\n",
    "    for atom in mol.GetAtoms():\n",
    "        idx = idxfunc(atom)\n",
    "        fatoms[idx] = atom_dict[''.join(str(x) for x in atom_features(atom).astype(int).tolist())] \n",
    "\n",
    "    for bond in mol.GetBonds():\n",
    "        a1 = idxfunc(bond.GetBeginAtom())\n",
    "        a2 = idxfunc(bond.GetEndAtom())\n",
    "        idx = bond.GetIdx()\n",
    "        fbonds[idx] = bond_dict[''.join(str(x) for x in bond_features(bond).astype(int).tolist())] \n",
    "        try:\n",
    "            atom_nb[a1,num_nbs[a1]] = a2\n",
    "            atom_nb[a2,num_nbs[a2]] = a1\n",
    "        except:\n",
    "            return [], [], [], [], []\n",
    "        bond_nb[a1,num_nbs[a1]] = idx\n",
    "        bond_nb[a2,num_nbs[a2]] = idx\n",
    "        num_nbs[a1] += 1\n",
    "        num_nbs[a2] += 1\n",
    "        \n",
    "    for i in range(len(num_nbs)):\n",
    "        num_nbs_mat[i,:num_nbs[i]] = 1\n",
    "\n",
    "    return fatoms, fbonds, atom_nb, bond_nb, num_nbs_mat\n",
    "\n",
    "\n",
    "def Batch_Mol2Graph(mol_list):\n",
    "    res = list(map(lambda x:Mol2Graph(x), mol_list))\n",
    "    fatom_list, fbond_list, gatom_list, gbond_list, nb_list = zip(*res)\n",
    "    return fatom_list, fbond_list, gatom_list, gbond_list, nb_list\n",
    "\n",
    "\n",
    "def Protein2Sequence(sequence, ngram=1):\n",
    "    # convert sequence to CNN input\n",
    "    sequence = sequence.upper()\n",
    "    word_list = [sequence[i:i+ngram] for i in range(len(sequence)-ngram+1)]\n",
    "    output = []\n",
    "    for word in word_list:\n",
    "        if word not in aa_list:\n",
    "            output.append(word_dict['X'])\n",
    "        else:\n",
    "            output.append(word_dict[word])\n",
    "    if ngram == 3:\n",
    "        output = [-1]+output+[-1] # pad\n",
    "    return np.array(output, np.int32)\n",
    "\n",
    "\n",
    "def Batch_Protein2Sequence(sequence_list, ngram=3):\n",
    "    res = list(map(lambda x:Protein2Sequence(x,ngram), sequence_list))\n",
    "    return res\n",
    "\n",
    "\n",
    "def get_mol_dict():\n",
    "    if os.path.exists('../data/mol_dict'):\n",
    "        with open('../data/mol_dict') as f:\n",
    "            mol_dict = pickle.load(f)\n",
    "    else:\n",
    "        mol_dict = {}\n",
    "        mols = Chem.SDMolSupplier('../data/Components-pub.sdf')\n",
    "        for m in mols:\n",
    "            if m is None:\n",
    "                continue\n",
    "            name = m.GetProp(\"_Name\")\n",
    "            mol_dict[name] = m\n",
    "        with open('../data/mol_dict', 'wb') as f:\n",
    "            pickle.dump(mol_dict, f)\n",
    "    #print('mol_dict',len(mol_dict))\n",
    "    return mol_dict\n",
    "\n",
    "\n",
    "def get_pairwise_label(pdbid, interaction_dict):\n",
    "    if pdbid in interaction_dict:\n",
    "        sdf_element = np.array([atom.GetSymbol().upper() for atom in mol.GetAtoms()])\n",
    "        atom_element = np.array(interaction_dict[pdbid]['atom_element'], dtype=str)\n",
    "        atom_name_list = np.array(interaction_dict[pdbid]['atom_name'], dtype=str)\n",
    "        atom_interact = np.array(interaction_dict[pdbid]['atom_interact'], dtype=int)\n",
    "        nonH_position = np.where(atom_element != ('H'))[0]\n",
    "        assert sum(atom_element[nonH_position] != sdf_element) == 0\n",
    "        \n",
    "        atom_name_list = atom_name_list[nonH_position].tolist()\n",
    "        pairwise_mat = np.zeros((len(nonH_position), len(interaction_dict[pdbid]['uniprot_seq'])), dtype=np.int32)\n",
    "        for atom_name, bond_type in interaction_dict[pdbid]['atom_bond_type']:\n",
    "            atom_idx = atom_name_list.index(str(atom_name))\n",
    "            assert atom_idx < len(nonH_position)\n",
    "            \n",
    "            seq_idx_list = []\n",
    "            for seq_idx, bond_type_seq in interaction_dict[pdbid]['residue_bond_type']:\n",
    "                if bond_type == bond_type_seq:\n",
    "                    seq_idx_list.append(seq_idx)\n",
    "                    pairwise_mat[atom_idx, seq_idx] = 1\n",
    "        if len(np.where(pairwise_mat != 0)[0]) != 0:\n",
    "            pairwise_mask = True\n",
    "            return True, pairwise_mat\n",
    "    return False, np.zeros((1,1))\n",
    "\n",
    "\n",
    "def get_fps(mol_list):\n",
    "    fps = []\n",
    "    for mol in mol_list:\n",
    "        fp = AllChem.GetMorganFingerprintAsBitVect(mol,2,nBits=1024,useChirality=True)\n",
    "        fps.append(fp)\n",
    "    #print('fingerprint list',len(fps))\n",
    "    return fps\n",
    "\n",
    "\n",
    "def calculate_sims(fps1,fps2,simtype='tanimoto'):\n",
    "    sim_mat = np.zeros((len(fps1),len(fps2))) #,dtype=np.float32)\n",
    "    for i in range(len(fps1)):\n",
    "        fp_i = fps1[i]\n",
    "        if simtype == 'tanimoto':\n",
    "            sims = DataStructs.BulkTanimotoSimilarity(fp_i,fps2)\n",
    "        elif simtype == 'dice':\n",
    "            sims = DataStructs.BulkDiceSimilarity(fp_i,fps2)\n",
    "        sim_mat[i,:] = sims\n",
    "    return sim_mat\n",
    "\n",
    "\n",
    "def compound_clustering(ligand_list, mol_list):\n",
    "    print 'start compound clustering...'\n",
    "    fps = get_fps(mol_list)\n",
    "    sim_mat = calculate_sims(fps, fps)\n",
    "    #np.save('../preprocessing/'+MEASURE+'_compound_sim_mat.npy', sim_mat)\n",
    "    print 'compound sim mat', sim_mat.shape\n",
    "    C_dist = pdist(fps, 'jaccard')\n",
    "    C_link = single(C_dist)\n",
    "    for thre in [0.3, 0.4, 0.5, 0.6]:\n",
    "        C_clusters = fcluster(C_link, thre, 'distance')\n",
    "        len_list = []\n",
    "        for i in range(1,max(C_clusters)+1):\n",
    "            len_list.append(C_clusters.tolist().count(i))\n",
    "        print 'thre', thre, 'total num of compounds', len(ligand_list), 'num of clusters', max(C_clusters), 'max length', max(len_list)\n",
    "        C_cluster_dict = {ligand_list[i]:C_clusters[i] for i in range(len(ligand_list))}\n",
    "        with open('../preprocessing/'+MEASURE+'_compound_cluster_dict_'+str(thre),'wb') as f:\n",
    "            pickle.dump(C_cluster_dict, f, protocol=0)\n",
    "\n",
    "\n",
    "def protein_clustering(protein_list, idx_list):\n",
    "    print 'start protein clustering...'\n",
    "    protein_sim_mat = np.load('../data/pdbbind_protein_sim_mat.npy').astype(np.float32)\n",
    "    sim_mat = protein_sim_mat[idx_list, :]\n",
    "    sim_mat = sim_mat[:, idx_list]\n",
    "    print 'original protein sim_mat', protein_sim_mat.shape, 'subset sim_mat', sim_mat.shape\n",
    "    #np.save('../preprocessing/'+MEASURE+'_protein_sim_mat.npy', sim_mat)\n",
    "    P_dist = []\n",
    "    for i in range(sim_mat.shape[0]):\n",
    "        P_dist += (1-sim_mat[i,(i+1):]).tolist()\n",
    "    P_dist = np.array(P_dist)\n",
    "    P_link = single(P_dist)\n",
    "    for thre in [0.3, 0.4, 0.5, 0.6]:\n",
    "        P_clusters = fcluster(P_link, thre, 'distance')\n",
    "        len_list = []\n",
    "        for i in range(1,max(P_clusters)+1):\n",
    "            len_list.append(P_clusters.tolist().count(i))\n",
    "        print 'thre', thre, 'total num of proteins', len(protein_list), 'num of clusters', max(P_clusters), 'max length', max(len_list)\n",
    "        P_cluster_dict = {protein_list[i]:P_clusters[i] for i in range(len(protein_list))}\n",
    "        with open('../preprocessing/'+MEASURE+'_protein_cluster_dict_'+str(thre),'wb') as f:\n",
    "            pickle.dump(P_cluster_dict, f, protocol=0)\n",
    "\n",
    "def pickle_dump(dictionary, file_name):\n",
    "    pickle.dump(dict(dictionary), open(file_name, 'wb'), protocol=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "MEASURE = 'KIKD' # 'IC50' or 'KIKD'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mol_dict = get_mol_dict()\n",
    "with open('../data/out7_final_pairwise_interaction_dict','rb') as f:\n",
    "    interaction_dict = pickle.load(f)\n",
    "\n",
    "wlnn_train_list = []\n",
    "atom_dict = defaultdict(lambda: len(atom_dict))\n",
    "bond_dict = defaultdict(lambda: len(bond_dict))\n",
    "word_dict = defaultdict(lambda: len(word_dict))\n",
    "for aa in aa_list:\n",
    "    word_dict[aa]\n",
    "word_dict['X']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Step 2/5, generating labels...\n",
      "processed sample num 1000\n",
      "processed sample num 2000\n",
      "processed sample num 3000\n",
      "processed sample num 4000\n",
      "processed sample num 5000\n",
      "processed sample num 6000\n",
      "processed sample num 7000\n",
      "processed sample num 8000\n",
      "processed sample num 9000\n",
      "processed sample num 10000\n",
      "processed sample num 11000\n",
      "processed sample num 12000\n",
      "processed sample num 13000\n"
     ]
    }
   ],
   "source": [
    "i = 0\n",
    "pair_info_dict = {}\n",
    "f = open('../data/pdbbind_all_datafile.tsv')\n",
    "print 'Step 2/5, generating labels...'\n",
    "for line in f.readlines():\n",
    "    i += 1\n",
    "    if i % 1000 == 0:\n",
    "        print 'processed sample num', i\n",
    "    pdbid, pid, cid, inchi, seq, measure, label = line.strip().split('\\t')\n",
    "    # filter interaction type and invalid molecules\n",
    "    if MEASURE == 'All':\n",
    "        pass\n",
    "    elif MEASURE == 'KIKD':\n",
    "        if measure not in ['Ki', 'Kd']:\n",
    "            continue\n",
    "    elif measure != MEASURE:\n",
    "        continue\n",
    "    if cid not in mol_dict:\n",
    "        print 'ligand not in mol_dict'\n",
    "        continue\n",
    "    mol = mol_dict[cid]\n",
    "    \n",
    "    # get labels\n",
    "    value = float(label)\n",
    "    pairwise_mask, pairwise_mat = get_pairwise_label(pdbid, interaction_dict)\n",
    "    \n",
    "    # handle the condition when multiple PDB entries have the same Uniprot ID and Inchi\n",
    "    if inchi+' '+pid not in pair_info_dict:\n",
    "        pair_info_dict[inchi+' '+pid] = [pdbid, cid, pid, value, mol, seq, pairwise_mask, pairwise_mat]\n",
    "    else:\n",
    "        if pair_info_dict[inchi+' '+pid][6]:\n",
    "            if pairwise_mask and pair_info_dict[inchi+' '+pid][3] < value:\n",
    "                pair_info_dict[inchi+' '+pid] = [pdbid, cid, pid, value, mol, seq, pairwise_mask, pairwise_mat]\n",
    "        else:\n",
    "            if pair_info_dict[inchi+' '+pid][3] < value:\n",
    "                pair_info_dict[inchi+' '+pid] = [pdbid, cid, pid, value, mol, seq, pairwise_mask, pairwise_mat]\n",
    "f.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/leoseo/opt/anaconda3/envs/p2env/lib/python2.7/site-packages/ipykernel_launcher.py:12: DeprecationWarning: elementwise comparison failed; this will raise an error in the future.\n",
      "  if sys.path[0] == '':\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "num of neighbor > 6,  84A\n",
      "num of neighbor > 6,  B1R\n",
      "num of neighbor > 6,  670\n",
      "num of neighbor > 6,  B9F\n",
      "num of neighbor > 6,  498\n",
      "num of neighbor > 6,  067\n"
     ]
    }
   ],
   "source": [
    "valid_value_list = []\n",
    "valid_cid_list = []\n",
    "valid_pid_list = []\n",
    "valid_pairwise_mask_list = []\n",
    "valid_pairwise_mat_list = []\n",
    "mol_inputs, seq_inputs = [], []\n",
    "\n",
    "# get inputs\n",
    "for item in pair_info_dict:\n",
    "    pdbid, cid, pid, value, mol, seq, pairwise_mask, pairwise_mat = pair_info_dict[item]\n",
    "    fa, fb, anb, bnb, nbs_mat = Mol2Graph(mol)\n",
    "    if fa==[]:\n",
    "        print 'num of neighbor > 6, ', cid\n",
    "        continue\n",
    "    mol_inputs.append([fa, fb, anb, bnb, nbs_mat])\n",
    "    seq_inputs.append(Protein2Sequence(seq,ngram=1))\n",
    "    valid_value_list.append(value)\n",
    "    valid_cid_list.append(cid)\n",
    "    valid_pid_list.append(pid)\n",
    "    valid_pairwise_mask_list.append(pairwise_mask)\n",
    "    valid_pairwise_mat_list.append(pairwise_mat)\n",
    "    wlnn_train_list.append(pdbid)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "valid_pair_list = []\n",
    "for i in range(len(valid_cid_list)):\n",
    "    pair = [valid_cid_list[i], valid_pid_list[i]]\n",
    "    valid_pair_list.append(pair)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6989"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(valid_pair_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['CTB', 'P00811']"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "valid_pair_list[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
